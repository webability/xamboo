<?php

/* @DESCR -- Do not edit

PHPExec.lib, Xamboo
Library to execute PHP code in a controlled encapsuler
(c) 2015 Philippe Thomassigny

This file is part of Xamboo

Xamboo is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Xamboo is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Xamboo.  If not, see <http://www.gnu.org/licenses/>.

Creation: 2012-09-23
Changes:
  2015-04-21 Phil: documentation, comments
  2018-01-02 Phil: added support for multilanguage

@End_DESCR */

/* @UML_Box -- Do not edit
|------------------------------------------------------------------|
| PHPExec : Container to execute PHP code                          |
|------------------------------------------------------------------|
|------------------------------------------------------------------|
|------------------------------------------------------------------|
@End_UML_Box */

namespace xamboo;

class PHPExec extends \core\WAClass
{
  private $catch = false;
  private $code = "";
  private $xbcode;
  private $engine;
  private $language;

  public function __construct($xbcode, $engine)
  {
    parent::__construct();
    $this->xbcode = $xbcode;
    $this->engine = $engine;
  }

  public function setLanguage($language)
  {
    $this->language = $language;
  }

  public function setCode($code)
  {
    $this->code = $code;
  }

  public function setCatch($catch)
  {
    $this->catch = $catch;
  }

  public function execute()
  {
    // filtrar los comandos NO autorizados !
    if ($this->catch)
    {
      ob_start();
    }
    $TEXT = "";
    $base = $this->base;
    $engine = $this->engine;
    $language = $this->language;

    $HTTPRequest = $this->base->HTTPRequest;
    $HTTPResponse = $this->base->HTTPResponse;
    $HTTPResponse->resetBuffer();

    $datos = eval($this->code);
    $TEXT .= $datos;
    $TEXT = $HTTPResponse->getBuffer() . $TEXT;
    if ($this->catch)
    {
      $TEXT .= ob_get_contents();
      ob_end_clean();
    }
    return $TEXT;
  }

}

?>