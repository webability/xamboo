<?php

/* @DESCR -- Do not edit

XBPage.lib, Xamboo
Contains the basic class to build a page definition instance
(c) 2015 Philippe Thomassigny

This file is part of Xamboo

Xamboo is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Xamboo is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Xamboo.  If not, see <http://www.gnu.org/licenses/>.

Creation: 2012-09-23
Changes:
  2012-09-24 Phil: agregue el soporte para comentarios en el compilador con '#'
  2012-09-24 Phil: agregue el soporte para array, iterator y countable
  2015-04-21 Phil: documentation, comments
  2017-04-21 Phil: Implemented parameter acceptpathparameters local/global. If yes, this page will accept parameters on path (after name of page, i.e /path/to/this/page/param1/param2...). Compilation of params with XConfig::compile, not anymore with XBCompiler

@End_DESCR */

/* @UML_Box -- Do not edit
|------------------------------------------------------------------|
| XBPage: page definition object                                   |
|------------------------------------------------------------------|
|------------------------------------------------------------------|
|------------------------------------------------------------------|
@End_UML_Box */

namespace xamboo;

class XBPage extends \core\WAClass implements \ArrayAccess, \Iterator, \Countable
{
  protected $entries = array();

  public function __construct($data)
  {
    parent::__construct();
    if (is_string($data))
    { // data buffer
      $this->entries = XBPage::compile($data);
    }
    else if (is_array($data))
    {
      if (isset($data['entries']))
        $this->entries = $data['entries'];
    }
    if (!isset($this->acceptpathparameters))
      $this->acceptpathparameters = $this->base->config->acceptpathparameters;
  }

  public function __get($name)
  {
    if (isset($this->entries[$name]))
      return $this->entries[$name];
    return null;
  }

  public function __set($name, $val)
  {
    if (self::$debug || $this->localdebug)
      $this->doDebug("include/common/XBInstance->__set( $name, $val )", \core\WADebug::SYSTEM);

    $this->entries[$name] = $val;
    return $this;
  }

  public function __isset($name)
  {
    return isset($this->entries[$name]);
  }

  public function __unset($name)
  {
    if (self::$debug || $this->localdebug)
      $this->doDebug("include/common/XBInstance->__unset( $name )", \core\WADebug::SYSTEM);

    unset($this->entries[$name]);
  }

  // ArrayAccess implemented
  public function offsetSet($offset, $value)
  {
    if ($offset)
      $this->entries[$offset] = $value;
  }

  public function offsetExists($offset)
  {
    return isset($this->entries[$offset]);
  }

  public function offsetUnset($offset)
  {
    unset($this->entries[$offset]);
  }

  public function offsetGet($offset)
  {
    return isset($this->entries[$offset]) ? $this->entries[$offset] : null;
  }

  // Iterator implemented
  public function rewind()
  {
    reset($this->entries);
  }

  public function current()
  {
    return current($this->entries);
  }

  public function key()
  {
    return key($this->entries);
  }

  public function next()
  {
    return next($this->entries);
  }

  public function valid()
  {
    return current($this->entries) !== false;
  }

  // Countable implemented
  public function count()
  {
    return count($this->entries);
  }

  // Own array get/set
  public function getArray()
  {
    return $this->entries;
  }

  public function setArray($array)
  {
    if (self::$debug || $this->localdebug)
      $this->doDebug("include/common/XBInstance->setArray( $array )", \core\WADebug::SYSTEM);

    foreach($array as $k => $v)
      $this->entries[$k] = $v;
    return $this;
  }

  protected function serial(&$data)
  {
    $data['entries'] = $this->entries;
  }

  protected function unserial($data)
  {
    $this->entries = $data['entries'];
  }

  public function __toString()
  {
    return XBPage::create($this->entries);
  }

  static function compile($data)
  {
    return \xconfig\XConfig::compile($data);
  }
  
  static function create($data)
  {
    $text = '';
    foreach($data as $k => $v)
      $text .= $k . '=' . $v . "\n";
    return $text;
  }

}

?>