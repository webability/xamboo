<?php

/*
    WALanguage.lib, DomCore, the WebAbility(r) Core System
    Contains the basic class to contains a language table
    (c) 2008-2017 Philippe Thomassigny

    This file is part of DomCore

    DomCore is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    DomCore is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with DomCore.  If not, see <http://www.gnu.org/licenses/>.
    
    History:
    2017-02-03: Phil, add implementation of array access, countable, iterable, object access magic functions
    2018-03-25: Phil, add implementation of attributes for each entry
*/

/* @UML_Box
|------------------------------------------------------------------|
| WALanguage: Language table                                       |
|------------------------------------------------------------------|
| # id: string                                                     |
| # lang: boolean                                                  |
| # entries: Array(id => string)                                   |
|------------------------------------------------------------------|
| + new WALanguage($data, $id = null, $lang = null)                |
| + getId(): string                                                |
| + getLang(): string                                              |
| + getEntry($id: string): string                                  |
| + delEntry($id: string): void                                    |
| + setEntry($id: string, $data: string): void                     |
| + rewind(): void                                                 |
| + current(): string                                              |
| + key(): string                                                  |
| + next(): string                                                 |
| + valid(): boolean                                               |
| # serial($data: array): void                                     |
| # unserial($data: array): void                                   |
| + __toString(): string                                           |
|------------------------------------------------------------------|
@End_UML_Box */

/*
class to compile and keep a Language set of entries
A language source file is an XML file:

<?xml version="1.0" encoding="UTF-8" ?>
<language id="file_id" lang="language_id">
  <entry id="entry_id"><![CDATA[translation into the language of the entry]]></entry>
  ...
</language>

*/

namespace core;

// Class to manage language table
class WALanguage extends WAClass implements \ArrayAccess, \Iterator, \Countable
{
  protected $id = '';
  protected $lang = '';
  protected $entries = array();
  protected $attributes = array();

  public function __construct($data, $id = null, $lang = null)
  {
    parent::__construct();

    if (is_string($data))
    { // XML buffer
      $this->entries = WALanguageCompiler::compile($data);
      $this->attributes = WALanguageCompiler::compileAttributes($data);
      $this->id = WALanguageCompiler::$id;
      $this->lang = WALanguageCompiler::$lang;
    }
    else if (is_array($data))
    {
      if (isset($data['id']))
        $this->id = $data['id'];
      else
        $this->id = $id;
      if (isset($data['lang']))
        $this->lang = $data['lang'];
      else
        $this->lang = $lang;
      if (isset($data['entries']))
        $this->entries = $data['entries'];
    }
    if ($id)
      $this->id = $id;
    if ($lang)
      $this->lang = $lang;
  }

  public function getId()
  {
    return $this->id;
  }

  public function getLang()
  {
    return $this->lang;
  }

  // ads or modify an entry
  public function setEntry($id, $data)
  {
    if (self::$debug || $this->localdebug)
      $this->doDebug("include/core/WALanguage->setEntry(%, %)", WADebug::SYSTEM, $id, $data);

    $this->entries[$id] = $data;
  }

  // delete an entry
  public function delEntry($id)
  {
    if (self::$debug || $this->localdebug)
      $this->doDebug("include/core/WALanguage->delEntry(%)", WADebug::SYSTEM, $id);

    if (isset($this->entries[$id]))
    {
      unset($this->entries[$id]);
    }
  }

  // get only 1 entry
  public function getEntry($id)
  {
    if (isset($this->entries[$id]))
      return $this->entries[$id];
    return $id;
  }

  public function getAttribute($id, $attribute)
  {
    if (isset($this->attributes[$id][$attribute]))
      return $this->attributes[$id][$attribute];
    return null;
  }

  public function setAttribute($id, $attribute, $value)
  {
    $this->attributes[$id][$attribute] = $value;
    return $this;
  }

  // magic functions implements
  public function __get($name)
  {
    if (isset($this->entries[$name]))
      return $this->entries[$name];
    return null;
  }

  public function __set($name, $val)
  {
    $this->entries[$name] = $val;
    return $this;
  }

  public function __isset($name)
  {
    return isset($this->entries[$name]);
  }

  public function __unset($name)
  {
    unset($this->entries[$name]);
    unset($this->attributes[$name]);
  }
  
  // ArrayAccess implemented
  public function offsetSet($offset, $value)
  {
    if ($offset)
      $this->entries[$offset] = $value;
  }

  public function offsetExists($offset)
  {
    return isset($this->entries[$offset]);
  }

  public function offsetUnset($offset)
  {
    unset($this->entries[$offset]);
  }

  public function offsetGet($offset)
  {
    return isset($this->entries[$offset]) ? $this->entries[$offset] : null;
  }
 
  // Iterator implemented
  public function rewind()
  {
    reset($this->entries);
  }

  public function current()
  {
    return current($this->entries);
  }

  public function key()
  {
    return key($this->entries);
  }

  public function next()
  {
    return next($this->entries);
  }

  public function valid()
  {
    return key($this->entries) !== null;
  }

  // Countable implemented
  public function count()
  {
    return count($this->entries);
  }

  // serialization
  protected function serial(&$data)
  {
    $data['id'] = $this->id;
    $data['lang'] = $this->lang;
    $data['entries'] = $this->entries;
    $data['attributes'] = $this->attributes;
  }

  protected function unserial($data)
  {
    $this->id = $data['id'];
    $this->lang = $data['lang'];
    $this->entries = $data['entries'];
    $this->attributes = $data['attributes'];
  }

  public function __toString()
  {
    return WALanguageCompiler::create($this->id, $this->lang, $this->entries, $this->attributes);
  }

}

?>