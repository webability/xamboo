<?php

/*
    WASHM.lib, DomCore, the WebAbility(r) Core System
    Contains the shared memory manager class to access resident memory variables
    (c) 2008-2017 Philippe Thomassigny

    This file is part of DomCore

    DomCore is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    DomCore is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with DomCore.  If not, see <http://www.gnu.org/licenses/>.
    
Changes:
  2015-11-16: Phil, Rewrite the library to be fast, use implicit var mapper and only give support for files (for AFO cache files from datasources). The variables mapper is still available but under specific conditions and optinos.

*/

/* @UML_Box -- Do not edit
|------------------------------------------------------------------|
| SHM : Shared Memory static object                                |
|------------------------------------------------------------------|
| - size : integer                                                 |
| - memid : integer                                                |
| - shm : resource                                                 |
|------------------------------------------------------------------|
| + new WASHM($size: integer, $memid: integer)                     |
| - start() : void                                                 |
| - attach() : resource                                            |
| - detach() : void                                                |
| - getlink($id: string, $type: enum(null, 'r', 'w', 'd')) : array('p': integer, 'r': timestamp, 'w': timestamp) |
| - writelink($id: string, $pointer: integer) : void               |
| - getnextpointer() : integer                                     |
| + write($id: string, $val: mixed) : void                         |
| + read($id: string) : void                                       |
| + delete($id: string) : void                                     |
| + lastread($id: string) : timestamp                              |
| + lastwrite($id: string) : timestamp                             |
| + __get($id: string) : mixed                                     |
| + __set($id: string, $data: mixed) : void                        |
| + __isset($id: string) : boolean                                 |
| + __unset($id: string) : void                                    |
| + flush() : void                                                 |
| + content() : array($name:string => $id: string)                 |
| + size() : array( 'total' => integer, 'used' => integer, 'free' => integer) |
|------------------------------------------------------------------|
|------------------------------------------------------------------|
@End_UML_Box */

namespace core;

class WASHM extends WADebug
{
  private $size = 20971520; // 20 MB by default (1024*1024*20)
  private $memid = 10010;   // our main memory ID by default, arbitrary value
                            // The memid will contain the IPC to the main vars pointer
  private $mapped = false;  // If we keep our data mapped into SHM. This is SLOW but portable, and we can control the occupied/free memory
  private $project = null;  // the project for ftok if we dont use mapped
  private $shm = null;      // our shared memory segment resource pointer
  private $seg = null;      // our semaphore to protect access concurrency

  public function __construct($size = null, $memid = null, $project = false)
  {
    parent::__construct();

    if (self::$debug || $this->localdebug)
      $this->doDebug("include/core/WASHM->__construct(%, %)", WADebug::SYSTEM, $size, $memid);

    if (!function_exists('shm_attach') || !function_exists('sem_get'))
      throw new \throwables\SHMError(\core\WAMessage::getMessage('WASHM.nosharedmemory'));

    if ($size)
      $this->size = $size;
    if ($memid)
      $this->memid = $memid;
    
    $this->shm = shm_attach($this->memid, $this->size);
    if (!$this->shm)
      throw new \throwables\SHMError(\core\WAMessage::getMessage('WASHM.noattach'));
    
    if (!$project)
    {
      $this->mapped = true;
      $this->start();
    }
    else
      $this->project = $project;
  }

  public function __destruct()
  {
    shm_detach($this->shm);
    $this->shm = null;
  }

  private function attach()
  {
    $this->seg = sem_get($this->memid, 1, 0666, -1); 
    $res = sem_acquire($this->seg);
    if (!$res)
      throw new \throwables\SHMError(\core\WAMessage::getMessage('WASHM.nosemacquire'));
  }

  private function detach()
  {
    sem_release($this->seg);
    $this->seg = null;
  }

  private function start()
  {
    // check if we have availability of shared memory
    $this->attach();
    if (!shm_has_var($this->shm, 0))
    {
      // check the result
      $res = shm_put_var($this->shm, 0, array());
      $res &= shm_put_var($this->shm, 1, 2);
      // throw if any error
      if (!$res)
        throw new \throwables\SHMError(\core\WAMessage::getMessage('WASHM.varaccess'));
    }
    $this->detach();
  }

  private function getlink($id, $type)
  {
    if (!$id)
      return null;
    if (!$this->mapped)
    {
      if (is_numeric($id))
        return $id;
      if (!is_file($id))
        throw new \throwables\SHMError(\core\WAMessage::getMessage('WASHM.nofile'));
      return ftok($id, $this->project);
    }
    
    $links = shm_get_var($this->shm, 0);
    if (is_array($links) && isset($links[$id]))
    {
      $link = $links[$id];
      if ($type == 'r') $links[$id]['r'] = microtime(true);
      if ($type == 'w') $links[$id]['w'] = microtime(true);
      if ($type == 'd') unset($links[$id]);
      if ($type)
        if (!shm_put_var($this->shm, 0, $links))
          throw new \throwables\SHMError(\core\WAMessage::getMessage('WASHM.varaccess'));
      return $link;
    }
    return null;
  }

  private function writelink($id, $pointer)
  {
    $link = array('p' => $pointer, 'r' => null, 'w' => microtime(true));
    $links = shm_get_var($this->shm, 0);
    if (!is_array($links))
      throw new \throwables\SHMError(\core\WAMessage::getMessage('WASHM.varaccess'));
    $links[$id] = $link;
    if (!shm_put_var($this->shm, 0, $links))
      throw new \throwables\SHMError(\core\WAMessage::getMessage('WASHM.varaccess'));
  }

  private function getnextpointer()
  {
    $pt = shm_get_var($this->shm, 1);
    if (!$pt)
      throw new \throwables\SHMError(\core\WAMessage::getMessage('WASHM.varaccess'));
    if (!shm_put_var($this->shm, 1, $pt+1))
      throw new \throwables\SHMError(\core\WAMessage::getMessage('WASHM.varaccess'));
    return $pt;
  }

  // write an object into shm
  public function write($id, $data)
  {
    if (self::$debug || $this->localdebug)
      $this->doDebug("include/core/WASHM->write(%, %)", WADebug::SYSTEM, $id, $data);

    $id = trim($id); // no spaces tab enter etc allowed
    $this->attach();
    $link = $this->getlink($id, 'w');
    if ($link)
    {
      $linkdata = $this->mapped?$link['p']:$link;
      if (!shm_put_var($this->shm, $linkdata, $data))
        throw new \throwables\SHMError(\core\WAMessage::getMessage('WASHM.varaccess'));
    }
    else
    {
      // Here we can only arrive if we are mapped (getlink always give a value if we are not mapped)
      $pointer = $this->getnextpointer();
      if (!shm_put_var($this->shm, $pointer, $data))
        throw new \throwables\SHMError(\core\WAMessage::getMessage('WASHM.varaccess'));
      $this->writelink($id, $pointer);
    }
    $this->detach();
  }

  // read an object from shm
  public function read($id)
  {
    if (self::$debug || $this->localdebug)
      $this->doDebug("include/core/WASHM->read(%)", WADebug::SYSTEM, $id);

    $id = trim($id); // no spaces tab enter etc allowed
    $this->attach();
    $var = null;
    $link = $this->getlink($id, 'r');
    // The autoload is more likely going to send an exception if the shm serialized class cannot be found, warnings are not annoying, @ removed
    if ($link)
    {
      $linkdata = $this->mapped?$link['p']:$link;
      // maybe there is nothing in memory for this ID
      $var = @shm_get_var($this->shm, $linkdata);
      if (!$var)
        $var = null;
    }
    $this->detach();
    return $var;
  }

  // delete an object from shm
  public function delete($id)
  {
    if (self::$debug || $this->localdebug)
      $this->doDebug("include/core/WASHM->delete(%)", WADebug::SYSTEM, $id);

    $id = trim($id); // no spaces tab enter etc allowed
    $this->attach();
    $link = $this->getlink($id, 'd');
    if ($link)
    {
      $linkdata = $this->mapped?$link['p']:$link;
      $var = @shm_remove_var($this->shm, $linkdata);
//      if (!$var)  // The variable was NOT in memory , why bother ?
//        throw new \throwables\SHMError(\core\WAMessage::getMessage('WASHM.varaccess'));
    }
    $this->detach();
  }

  public function lastread($id)
  {
    if (self::$debug || $this->localdebug)
      $this->doDebug("include/core/WASHM->lastread(%)", WADebug::SYSTEM, $id);
    if (!$this->mapped)
      return null;
    $id = trim($id); // no spaces tab enter etc allowed
    $this->attach();
    $link = $this->getlink($id, null);
    $this->detach();
    if ($link)
      return $link['r'];
    return null;
  }

  public function lastwrite($id)
  {
    if (self::$debug || $this->localdebug)
      $this->doDebug("include/core/WASHM->lastwrite(%)", WADebug::SYSTEM, $id);
    if (!$this->mapped)
      return null;
    $id = trim($id); // no spaces tab enter etc allowed
    $this->attach();
    $link = $this->getlink($id, null);
    $this->detach();
    if ($link)
      return $link['w'];
    return null;
  }

  public function __get($id)
  {
    return $this->read($id);
  }

  public function __set($id, $data)
  {
    $this->write($id, $data);
  }

  public function __isset($id)
  {
    if (self::$debug || $this->localdebug)
      $this->doDebug("include/core/WASHM->__isset(%)", WADebug::SYSTEM, $name);

    $this->attach();
    $link = $this->getlink($id, null);
    $this->detach();
    return !!$link;
  }

  public function __unset($id)
  {
    $this->delete($id);
  }

  // clear all the memory
  public function flush()
  {
    if (self::$debug || $this->localdebug)
      $this->doDebug('include/core/WASHM->flush()', WADebug::SYSTEM);

    $this->attach();
    shm_remove($this->shm);
    shm_detach($this->shm);
    $this->shm = shm_attach($this->memid, $this->size);
    $this->detach();
    //restart with same values
    if ($this->mapped)
      $this->start();
  }

  // get all the id of sm objects
  public function content()
  {
    if (self::$debug || $this->localdebug)
      $this->doDebug('include/core/WASHM->content()', WADebug::SYSTEM);
    if (!$this->mapped)
      return null;
    $this->attach();
    $links = shm_get_var($this->shm, 0);
    $this->detach();
    return $links;
  }

  // return totalmem, usedmem, freemem
  public function size()
  {
    if (self::$debug || $this->localdebug)
      $this->doDebug('include/core/WASHM->size()', WADebug::SYSTEM);
    if (!$this->mapped)
      return null;
    $this->attach();
    // header size
    $size = (PHP_INT_SIZE * 4) + 8;
    $links = shm_get_var($this->shm, 0);
    $size += (((strlen(serialize($links))+ (4 * PHP_INT_SIZE)) /4 ) * 4 ) + 4;
    $pointer = shm_get_var($this->shm, 1);
    $size += (((strlen(serialize($pointer))+ (4 * PHP_INT_SIZE)) /4 ) * 4 ) + 4;
    foreach($links as $link)
    {
      // The autoload is more likely going to send an exception if the shm serialized class cannot be found, warnings are not annoying, @ removed
      $var = shm_get_var($this->shm, $link['p']);
      if (!$var)
        throw new \throwables\SHMError(\core\WAMessage::getMessage('WASHM.varaccess'));
      $size += (((strlen(serialize($var))+ (4 * PHP_INT_SIZE)) /4 ) * 4 ) + 4;
    }
    $this->detach();
    return array('total' => $this->size, 'used' => $size, 'free' => $this->size - $size);
  }

}

?>